                extern print_num
                extern double_module
                extern pow

%macro          print 0
                SECTION .text
                fstp qword [PFLOAT]
                push dword [PFLOAT+4]
                push dword [PFLOAT]
                call print_num
                add esp, 8

%endmacro

%macro          mathMod 0
                SECTION .text
                fstp qword [PFLOAT2]
                fstp qword [PFLOAT]
                push dword [PFLOAT2+4]
                push dword [PFLOAT2]
                push dword [PFLOAT+4]
                push dword [PFLOAT]
                call double_module
                add esp, 16
%endmacro

%macro          mathPow 0
                SECTION .text
                fstp qword [PFLOAT2]
                fstp qword [PFLOAT]
                push dword [PFLOAT2+4]
                push dword [PFLOAT2]
                push dword [PFLOAT+4]
                push dword [PFLOAT]
                call pow
                add esp, 16
%endmacro

%macro          compLE 0            ; left(st1), right(st0) ?
                SECTION .text
                xor eax, eax
                fsub                ; st0 = left - right
                fld qword [EPS]     ; st0 = -EPS
                fucomip             ; is left - right < EPS ?
                setb al
                fstp
                cmp eax, 1          ;
%endmacro 

%macro          compLT 0            ; left(st1), right(st0) ?
                SECTION .text
                xor eax, eax
                fsub                ; st0 = left - right
                fchs
                fld qword [EPS]  
                fucomip             ; is left - right < EPS ?
                seta al
                fstp
                cmp eax, 1          ;
%endmacro

%macro          compGE 0            ; left(st1), right(st0) ?
                SECTION .text
                xor eax, eax
                fsub                ; st0 = right - left
                fld qword [EPS]
                fchs                ; st0 = -EPS
                fucomip             ; is  right - left < -EPS ?
                seta al
                fstp
                cmp eax, 1          ;
%endmacro

%macro          compGT 0            ; left(st1), right(st0) ?
                SECTION .text
                xor eax, eax
                fsub                ; st0 = right - left
                fld qword [EPS]     ; st0 = EPS
                fucomip             ; is  right - left < EPS ?
                seta al
                fstp
                cmp eax, 1          ;
%endmacro

%macro          compNE 0
                fsub
                fabs
                fld qword [EPS]
                xor eax, eax
                fucomip
                seta al
                fstp
                cmp eax, 1
%endmacro

%macro          compEQ 0
                fsub
                fabs
                fld qword [EPS]
                xor eax, eax
                fucomip
                seta al
                fstp
                cmp eax, 0
%endmacro

global main
main:


